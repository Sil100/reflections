    -> When would you want to use a remote repository rather than keeping all your work local?
    
     I think is a good idea to use a remote repository when you want to:
       - colaborate with other people on a larger project
       - show your code to a possible employer or friend
       - need to access some files from different computers
       - distribute your code to a larger audience


    -> Why might you want to always pull changes manually rather than having Git automatically
       stay up-to-date with your remote repository?

      You need to be up to date before you push someting new to GitHub. This can help you to avoid
      conflicts.
      I am not sure what "Git automatically stay up-to-date with your remote repository" means. Can
      git automatically pull from a remote repository?



    -> Describe the differences between forks, clones, and branches. When would you use one 
       instead of another?

       A fork is like a clone but it keep a reference to the original repository. A branch can starts 
       from either a clone or a fork. A fork is a copy of a repository of another user in our GitHub 
       space.


 
    -> What is the benefit of having a copy of the last known state of the remote stored locally?

      If you have a copy of the last known stat of the remote stored locally you can modify that 
      copy and avoid conflicts that may appear if tha local copy is different than the remote copy.




    -> How would you collaborate without using Git or GitHub? What would be easier, 
       and what would be harder?

      Without Git or GitHub is not easy to colaborate. Of corse it is possible to use another 
      colaborative tool like svn, mail messages, google docs but is not easy and effective.
      With Git it is really easy. A colaborator can see your code and colaborate if you want
      to allow him to do so. A history of modification is keep up to date by git and is 
      something is not correct you can roll back changes.



    -> When would you want to make changes in a separate branch rather than directly in master? 
       What benefits does each approach have?

       Well, when you are not sure that the code that you are writing is the final version, when you
       want to make experiments or want to merge your code into another repository.
