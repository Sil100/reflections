

    -> What happens when you initialize a repository? Why do you need to do it?

    When a reposiory is initialized a new file called .git is added into the directory where the 
    repository was created. From now on the git will track the changes of the files in that directory.

    A repository permits to have a centralized folder where the changes git metadatas related to a 
    given project are stored.


    -> How is the staging area different from the working directory and the repository? What value
       do you think it offers?

       Staging area is an intermediate space where you can add the files that you want to track. 
    In the future you can commit the files you want or revert changes and don't commit some 
    modifications. You are free to commit only what you want.

       Into the working directory all the project's related files are present. Into the staging area
     are added only the current modified files. 

       I think that the repository contains only the commited files. Off course, I can be wrong.

 
 
     -> How can you use the staging area to make sure you have one commit per logical change?

       I can use the staging area to add files that will be commited latter. When I want to commit 
     changes I use the git status command to see all the files that are already in the staging area
     and choose the files that are logically related and commit them together with a meaningfull 
     comment. In the next step I can make another commit for another logical change and so on.

     -> What are some situations when branches would be helpful in keeping your history organized? 
        How would branches help?

        I think that branches help when an experimental feature is developed. We can work on that feature
     whithout any fear that our changes can break the original code.

        There can be situations when we want to make documentation that is relevant only for some users
     (in different languages for example) and we don't want to add that documentation in the main branch.
 
        If we have code from another source and want to test that code with our code we cand merge our 
     code with that code into a different branch. 



     
     -> How do the diagrams help you visualize the branch stucture?

       A diagram can help you visualize the branch structure allowing you to view when a branch was
     created and what commits it contains. You can view the structure and combine the branches as you
     wish.




      -> What is the result of merging two branches together? Why do we represent it in the diagram the
         way we do?

          When two branches are merged the commits of the branch that is NOT checked out are added to the 
      checked out branch. It is good idea to verify what branch is checked out before a merge is 
      performed. The resulting branche will contain all the commits of the two merged branches ordered by
      timestamp of each commit.

          The command for merging two branches is: 
                    git merge branch1 branch2

          If a branch is not needed anymore (after a merge for example) you can delete it with the 
      command:
                    git branch -d branch_name

          In the diagram is shown the branch that are added to the merged one and the commits for each 
      branch.

           In order to view the differences between a commit and a parent commit you can use:
          
                   git show commit_id

           OBS: This is a useful command when you are not sure what is the parent commit of a given
                commit (that can be the case when multiple files are merged and is not clear what 
                commit was added before a given commit and in what file).



      -> What are the pros and cons of Git's automatic merging vs. always doing merges manually?

         When Git try to make a merge and see that there are differences in different parts of the
      merging files it merge (combine) the two files without any problems. That is a good thing because
      in this case we can assume that the changes are wanted in a final version. 
        When the Git cannot make a merge because there are conflicts between the files that will be
      merged the merge is not made aotomatically because it is not possible to determine which change
      are good for final version and which is not that good. In this case Git will mark the changes and
      the creators of the files will modify the final file and that file will be commited.
  















